{"version":3,"sources":["ScrollView.tsx"],"names":["React","useRef","useImperativeHandle","useEffect","forwardRef","memo","ScrollView","RNScrollView","isEqual","Animated","NativeViewGestureHandler","BottomSheetDraggableView","useScrollableInternal","useBottomSheetInternal","styles","AnimatedScrollView","createAnimatedComponent","BottomSheetScrollViewComponent","props","ref","focusHook","useFocusHook","rest","nativeGestureRef","scrollableRef","handleScrollEvent","handleSettingScrollable","enableContentPanningGesture","containerTapGestureRef","decelerationRate","current","getNode","container","BottomSheetScrollView"],"mappings":";;AAAA,OAAOA,KAAP,IACEC,MADF,EAEEC,mBAFF,EAGEC,SAHF,EAIEC,UAJF,EAMEC,IANF,QAOO,OAPP;AAQA,SACEC,UAAU,IAAIC,YADhB,QAIO,cAJP;AAKA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,wBAAT,QAAyC,8BAAzC;AACA,OAAOC,wBAAP,MAAqC,6BAArC;AACA,SAASC,qBAAT,EAAgCC,sBAAhC,QAA8D,aAA9D;AAKA,SAASC,MAAT,QAAuB,UAAvB;AAEA,MAAMC,kBAAkB,GAAGN,QAAQ,CAACO,uBAAT,CACzBT,YADyB,CAA3B;AAOA,MAAMU,8BAA8B,gBAAGb,UAAU,CAC/C,CAACc,KAAD,EAAoCC,GAApC,KAA+D;AAC7D;AACA,QAAM;AAAEC,IAAAA,SAAS,EAAEC,YAAY,GAAGlB,SAA5B;AAAuC,OAAGmB;AAA1C,MAAmDJ,KAAzD,CAF6D,CAI7D;;AACA,QAAMK,gBAAgB,GAAGtB,MAAM,CAA2B,IAA3B,CAA/B,CAL6D,CAO7D;;AACA,QAAM;AACJuB,IAAAA,aADI;AAEJC,IAAAA,iBAFI;AAGJC,IAAAA;AAHI,MAIFd,qBAAqB,CAAC,YAAD,CAJzB;AAKA,QAAM;AACJe,IAAAA,2BADI;AAEJC,IAAAA,sBAFI;AAGJC,IAAAA;AAHI,MAIFhB,sBAAsB,EAJ1B,CAb6D,CAmB7D;AACA;;AACAX,EAAAA,mBAAmB,CAACiB,GAAD,EAAM,MAAMK,aAAa,CAACM,OAAd,CAAuBC,OAAvB,EAAZ,CAAnB;AACAV,EAAAA,YAAY,CAACK,uBAAD,CAAZ;AAEA,sBACE,oBAAC,wBAAD;AACE,IAAA,gBAAgB,EAAEH,gBADpB;AAEE,IAAA,WAAW,EAAC,SAFd;AAGE,IAAA,KAAK,EAAET,MAAM,CAACkB;AAHhB,kBAKE,oBAAC,wBAAD;AACE,IAAA,GAAG,EAAET,gBADP;AAEE,IAAA,OAAO,EAAEI,2BAFX;AAGE,IAAA,OAAO,EAAEC;AAHX,kBAKE,oBAAC,kBAAD,eACMN,IADN;AAEE,IAAA,GAAG,EAAEE,aAFP;AAGE,IAAA,cAAc,EAAC,OAHjB;AAIE,IAAA,OAAO,EAAE,KAJX;AAKE,IAAA,gBAAgB,EAAEK,gBALpB;AAME,IAAA,mBAAmB,EAAE,CANvB;AAOE,IAAA,QAAQ,EAAEJ,iBAPZ;AAQE,IAAA,iBAAiB,EAAEA;AARrB,KALF,CALF,CADF;AAwBD,CAjD8C,CAAjD;AAoDA,MAAMQ,qBAAqB,gBAAG5B,IAAI,CAACY,8BAAD,EAAiCT,OAAjC,CAAlC;AAEA,eAAgByB,qBAAhB","sourcesContent":["import React, {\n  useRef,\n  useImperativeHandle,\n  useEffect,\n  forwardRef,\n  Ref,\n  memo,\n} from 'react';\nimport {\n  ScrollView as RNScrollView,\n  ScrollViewProps as RNScrollViewProps,\n  ViewStyle,\n} from 'react-native';\nimport isEqual from 'lodash.isequal';\nimport Animated from 'react-native-reanimated';\nimport { NativeViewGestureHandler } from 'react-native-gesture-handler';\nimport BottomSheetDraggableView from '../bottomSheetDraggableView';\nimport { useScrollableInternal, useBottomSheetInternal } from '../../hooks';\nimport type {\n  BottomSheetScrollViewType,\n  BottomSheetScrollViewProps,\n} from './types';\nimport { styles } from './styles';\n\nconst AnimatedScrollView = Animated.createAnimatedComponent(\n  RNScrollView\n) as React.ComponentClass<\n  Animated.AnimateProps<ViewStyle, RNScrollViewProps>,\n  any\n>;\n\nconst BottomSheetScrollViewComponent = forwardRef(\n  (props: BottomSheetScrollViewProps, ref: Ref<RNScrollView>) => {\n    // props\n    const { focusHook: useFocusHook = useEffect, ...rest } = props;\n\n    // refs\n    const nativeGestureRef = useRef<NativeViewGestureHandler>(null);\n\n    // hooks\n    const {\n      scrollableRef,\n      handleScrollEvent,\n      handleSettingScrollable,\n    } = useScrollableInternal('ScrollView');\n    const {\n      enableContentPanningGesture,\n      containerTapGestureRef,\n      decelerationRate,\n    } = useBottomSheetInternal();\n\n    // effects\n    // @ts-ignore\n    useImperativeHandle(ref, () => scrollableRef.current!.getNode());\n    useFocusHook(handleSettingScrollable);\n\n    return (\n      <BottomSheetDraggableView\n        nativeGestureRef={nativeGestureRef}\n        gestureType=\"CONTENT\"\n        style={styles.container}\n      >\n        <NativeViewGestureHandler\n          ref={nativeGestureRef}\n          enabled={enableContentPanningGesture}\n          waitFor={containerTapGestureRef}\n        >\n          <AnimatedScrollView\n            {...rest}\n            ref={scrollableRef}\n            overScrollMode=\"never\"\n            bounces={false}\n            decelerationRate={decelerationRate}\n            scrollEventThrottle={1}\n            onScroll={handleScrollEvent}\n            onScrollBeginDrag={handleScrollEvent}\n          />\n        </NativeViewGestureHandler>\n      </BottomSheetDraggableView>\n    );\n  }\n);\n\nconst BottomSheetScrollView = memo(BottomSheetScrollViewComponent, isEqual);\n\nexport default (BottomSheetScrollView as any) as typeof BottomSheetScrollViewType;\n"]}