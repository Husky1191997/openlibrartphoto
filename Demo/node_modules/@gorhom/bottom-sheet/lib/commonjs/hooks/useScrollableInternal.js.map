{"version":3,"sources":["useScrollableInternal.ts"],"names":["useScrollableInternal","type","scrollableContentOffsetYRef","scrollableContentOffsetY","scrollableRef","_scrollableContentOffsetY","setScrollableRef","removeScrollableRef","handleScrollEvent","nativeEvent","contentOffset","y","handleSettingScrollable","setValue","current","id","node","getNode","console","warn","args"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAGO,MAAMA,qBAAqB,GAAIC,IAAD,IAA0B;AAC7D;AACA,QAAMC,2BAA2B,GAAG,mBAAe,CAAf,CAApC;AACA,QAAMC,wBAAwB,GAAG,iCAAiB,CAAjB,CAAjC;AACA,QAAMC,aAAa,GAAG,mBAAmB,IAAnB,CAAtB,CAJ6D,CAM7D;;AACA,QAAM;AACJD,IAAAA,wBAAwB,EAAEE,yBADtB;AAEJC,IAAAA,gBAFI;AAGJC,IAAAA;AAHI,MAIF,qDAJJ,CAP6D,CAa7D;;AACA,QAAMC,iBAAiB,GAAG,oBACxB,MACE,kCAAM,CACJ;AACEC,IAAAA,WAAW,EAAE;AACXC,MAAAA,aAAa,EAAE;AAAEC,QAAAA,CAAC,EAAER;AAAL;AADJ;AADf,GADI,CAAN,CAFsB,EASxB,CAACA,wBAAD,CATwB,CAA1B;AAWA,QAAMS,uBAAuB,GAAG,wBAAY,MAAM;AAChDP,IAAAA,yBAAyB,CAACQ,QAA1B,CAAmCX,2BAA2B,CAACY,OAA/D;;AAEA,UAAMC,EAAE,GAAG,iCAAeX,aAAa,CAACU,OAA7B,CAAX;;AAEA,QAAIC,EAAJ,EAAQ;AACNT,MAAAA,gBAAgB,CAAC;AACfS,QAAAA,EAAE,EAAEA,EADW;AAEfd,QAAAA,IAFe;AAGf;AACAe,QAAAA,IAAI,EAAEZ,aAAa,CAACU,OAAd,CAAuBG,OAAvB;AAJS,OAAD,CAAhB;AAMD,KAPD,MAOO;AACLC,MAAAA,OAAO,CAACC,IAAR;AACD;;AAED,WAAO,MAAM;AACXZ,MAAAA,mBAAmB,CAACH,aAAD,CAAnB;AACD,KAFD;AAGD,GAnB+B,EAmB7B,CAACH,IAAD,EAAOI,yBAAP,EAAkCE,mBAAlC,EAAuDD,gBAAvD,CAnB6B,CAAhC,CAzB6D,CA8C7D;;AACA,sCACE,MACE,qCAASH,wBAAT,EAAmC,CACjC,gCAAIE,yBAAJ,EAA+BF,wBAA/B,CADiC,EAEjC,iCAAK,CAACA,wBAAD,CAAL,EAAiCiB,IAAI,IAAI;AACvClB,IAAAA,2BAA2B,CAACY,OAA5B,GAAsCM,IAAI,CAAC,CAAD,CAA1C;AACD,GAFD,CAFiC,CAAnC,CAFJ,EAQE,EARF;AAWA,SAAO;AACLhB,IAAAA,aADK;AAELI,IAAAA,iBAFK;AAGLI,IAAAA;AAHK,GAAP;AAKD,CA/DM","sourcesContent":["import { useCallback, useRef, useMemo } from 'react';\nimport { findNodeHandle } from 'react-native';\nimport { event, useCode, onChange, set, call } from 'react-native-reanimated';\nimport { useValue } from 'react-native-redash';\nimport { useBottomSheetInternal } from '../hooks/useBottomSheetInternal';\nimport type { Scrollable, ScrollableType } from '../types';\n\nexport const useScrollableInternal = (type: ScrollableType) => {\n  // refs\n  const scrollableContentOffsetYRef = useRef<number>(0);\n  const scrollableContentOffsetY = useValue<number>(0);\n  const scrollableRef = useRef<Scrollable>(null);\n\n  // hooks\n  const {\n    scrollableContentOffsetY: _scrollableContentOffsetY,\n    setScrollableRef,\n    removeScrollableRef,\n  } = useBottomSheetInternal();\n\n  // callbacks\n  const handleScrollEvent = useMemo(\n    () =>\n      event([\n        {\n          nativeEvent: {\n            contentOffset: { y: scrollableContentOffsetY },\n          },\n        },\n      ]),\n    [scrollableContentOffsetY]\n  );\n  const handleSettingScrollable = useCallback(() => {\n    _scrollableContentOffsetY.setValue(scrollableContentOffsetYRef.current);\n\n    const id = findNodeHandle(scrollableRef.current);\n\n    if (id) {\n      setScrollableRef({\n        id: id,\n        type,\n        // @ts-ignore\n        node: scrollableRef.current!.getNode(),\n      });\n    } else {\n      console.warn(`Couldn't find the scrollable node handle id!`);\n    }\n\n    return () => {\n      removeScrollableRef(scrollableRef);\n    };\n  }, [type, _scrollableContentOffsetY, removeScrollableRef, setScrollableRef]);\n\n  // effects\n  useCode(\n    () =>\n      onChange(scrollableContentOffsetY, [\n        set(_scrollableContentOffsetY, scrollableContentOffsetY),\n        call([scrollableContentOffsetY], args => {\n          scrollableContentOffsetYRef.current = args[0];\n        }),\n      ]),\n    []\n  );\n\n  return {\n    scrollableRef,\n    handleScrollEvent,\n    handleSettingScrollable,\n  };\n};\n"]}