{"version":3,"sources":["PortalContainer.tsx"],"names":["React","forwardRef","memo","useCallback","useImperativeHandle","useNodes","PortalContainerComponent","_","ref","state","add","update","remove","handleMount","key","node","handleUpdate","handleUnmount","mount","unmount","map","item","PortalContainer"],"mappings":"AAAA,OAAOA,KAAP,IACEC,UADF,EAEEC,IAFF,EAGEC,WAHF,EAIEC,mBAJF,QAKO,OALP;AAMA,SAASC,QAAT,QAAyB,aAAzB;AAGA,MAAMC,wBAAwB,gBAAGL,UAAU,CAAqB,CAACM,CAAD,EAAIC,GAAJ,KAAY;AAC1E;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,GAAT;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA;AAAtB,MAAiCP,QAAQ,EAA/C,CAF0E,CAG1E;AAEA;;AACA,QAAMQ,WAAW,GAAGV,WAAW,CAC7B,CAACW,GAAD,EAAMC,IAAN,KAAe;AACbL,IAAAA,GAAG,CAACI,GAAD,EAAMC,IAAN,CAAH;AACD,GAH4B,EAI7B,CAACL,GAAD,CAJ6B,CAA/B;AAMA,QAAMM,YAAY,GAAGb,WAAW,CAC9B,CAACW,GAAD,EAAMC,IAAN,KAAe;AACbJ,IAAAA,MAAM,CAACG,GAAD,EAAMC,IAAN,CAAN;AACD,GAH6B,EAI9B,CAACJ,MAAD,CAJ8B,CAAhC;AAMA,QAAMM,aAAa,GAAGd,WAAW,CAC/BW,GAAG,IAAI;AACLF,IAAAA,MAAM,CAACE,GAAD,CAAN;AACD,GAH8B,EAI/B,CAACF,MAAD,CAJ+B,CAAjC,CAlB0E,CAwB1E;AAEA;;AACAR,EAAAA,mBAAmB,CAACI,GAAD,EAAM,OAAO;AAC9BU,IAAAA,KAAK,EAAEL,WADuB;AAE9BF,IAAAA,MAAM,EAAEK,YAFsB;AAG9BG,IAAAA,OAAO,EAAEF;AAHqB,GAAP,CAAN,CAAnB,CA3B0E,CAgC1E;AAEA;;AACA,sBAAO,0CAAGR,KAAK,CAACW,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACN,IAAvB,CAAH,CAAP,CAnC0E,CAoC1E;AACD,CArC0C,CAA3C;AAuCA,MAAMO,eAAe,gBAAGpB,IAAI,CAACI,wBAAD,CAA5B;AAEA,eAAegB,eAAf","sourcesContent":["import React, {\n  forwardRef,\n  memo,\n  useCallback,\n  useImperativeHandle,\n} from 'react';\nimport { useNodes } from '../../hooks';\nimport type { PortalMethods } from '../../types';\n\nconst PortalContainerComponent = forwardRef<PortalMethods, any>((_, ref) => {\n  //#region state\n  const { state, add, update, remove } = useNodes();\n  //#endregion\n\n  //#region\n  const handleMount = useCallback(\n    (key, node) => {\n      add(key, node);\n    },\n    [add]\n  );\n  const handleUpdate = useCallback(\n    (key, node) => {\n      update(key, node);\n    },\n    [update]\n  );\n  const handleUnmount = useCallback(\n    key => {\n      remove(key);\n    },\n    [remove]\n  );\n  //#endregion\n\n  //#region forward methods\n  useImperativeHandle(ref, () => ({\n    mount: handleMount,\n    update: handleUpdate,\n    unmount: handleUnmount,\n  }));\n  //#endregion\n\n  //#region render\n  return <>{state.map(item => item.node)}</>;\n  //#endregion\n});\n\nconst PortalContainer = memo(PortalContainerComponent);\n\nexport default PortalContainer;\n"]}