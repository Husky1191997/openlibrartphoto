import React, { memo, useCallback, useMemo, useRef } from 'react';
import PortalContainer from '../portalContainer';
import { PortalContext } from '../../contexts';

const PortalHostComponent = ({
  children
}) => {
  const containerRef = useRef(null); //#region

  const mount = useCallback((key, node) => {
    if (containerRef.current) {
      containerRef.current.mount(key, node);
    }
  }, []);
  const update = useCallback((key, node) => {
    if (containerRef.current) {
      containerRef.current.update(key, node);
    }
  }, []);
  const unmount = useCallback(key => {
    if (containerRef.current) {
      containerRef.current.unmount(key);
    }
  }, []); //#endregion

  const value = useMemo(() => ({
    mount,
    update,
    unmount
  }), [mount, update, unmount]);
  return /*#__PURE__*/React.createElement(PortalContext.Provider, {
    value: value
  }, children, /*#__PURE__*/React.createElement(PortalContainer, {
    ref: containerRef
  }));
};

const PortalHost = /*#__PURE__*/memo(PortalHostComponent);
export default PortalHost;
//# sourceMappingURL=PortalHost.js.map