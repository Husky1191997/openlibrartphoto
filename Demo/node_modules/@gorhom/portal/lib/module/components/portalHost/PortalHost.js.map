{"version":3,"sources":["PortalHost.tsx"],"names":["React","memo","useCallback","useMemo","useRef","PortalContainer","PortalContext","PortalHostComponent","children","containerRef","mount","key","node","current","update","unmount","value","PortalHost"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,WAAtB,EAAmCC,OAAnC,EAA4CC,MAA5C,QAA0D,OAA1D;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,aAAT,QAA8B,gBAA9B;;AAIA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmC;AAC7D,QAAMC,YAAY,GAAGL,MAAM,CAAgB,IAAhB,CAA3B,CAD6D,CAG7D;;AACA,QAAMM,KAAK,GAAGR,WAAW,CAAC,CAACS,GAAD,EAAMC,IAAN,KAAe;AACvC,QAAIH,YAAY,CAACI,OAAjB,EAA0B;AACxBJ,MAAAA,YAAY,CAACI,OAAb,CAAqBH,KAArB,CAA2BC,GAA3B,EAAgCC,IAAhC;AACD;AACF,GAJwB,EAItB,EAJsB,CAAzB;AAKA,QAAME,MAAM,GAAGZ,WAAW,CAAC,CAACS,GAAD,EAAMC,IAAN,KAAe;AACxC,QAAIH,YAAY,CAACI,OAAjB,EAA0B;AACxBJ,MAAAA,YAAY,CAACI,OAAb,CAAqBC,MAArB,CAA4BH,GAA5B,EAAiCC,IAAjC;AACD;AACF,GAJyB,EAIvB,EAJuB,CAA1B;AAKA,QAAMG,OAAO,GAAGb,WAAW,CAACS,GAAG,IAAI;AACjC,QAAIF,YAAY,CAACI,OAAjB,EAA0B;AACxBJ,MAAAA,YAAY,CAACI,OAAb,CAAqBE,OAArB,CAA6BJ,GAA7B;AACD;AACF,GAJ0B,EAIxB,EAJwB,CAA3B,CAd6D,CAmB7D;;AAEA,QAAMK,KAAK,GAAGb,OAAO,CACnB,OAAO;AACLO,IAAAA,KADK;AAELI,IAAAA,MAFK;AAGLC,IAAAA;AAHK,GAAP,CADmB,EAMnB,CAACL,KAAD,EAAQI,MAAR,EAAgBC,OAAhB,CANmB,CAArB;AASA,sBACE,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEC;AAA/B,KACGR,QADH,eAEE,oBAAC,eAAD;AAAiB,IAAA,GAAG,EAAEC;AAAtB,IAFF,CADF;AAMD,CApCD;;AAsCA,MAAMQ,UAAU,gBAAGhB,IAAI,CAACM,mBAAD,CAAvB;AAEA,eAAeU,UAAf","sourcesContent":["import React, { memo, useCallback, useMemo, useRef } from 'react';\nimport PortalContainer from '../portalContainer';\nimport { PortalContext } from '../../contexts';\nimport type { PortalMethods } from '../../types';\nimport type { PortalHostProps } from './types';\n\nconst PortalHostComponent = ({ children }: PortalHostProps) => {\n  const containerRef = useRef<PortalMethods>(null);\n\n  //#region\n  const mount = useCallback((key, node) => {\n    if (containerRef.current) {\n      containerRef.current.mount(key, node);\n    }\n  }, []);\n  const update = useCallback((key, node) => {\n    if (containerRef.current) {\n      containerRef.current.update(key, node);\n    }\n  }, []);\n  const unmount = useCallback(key => {\n    if (containerRef.current) {\n      containerRef.current.unmount(key);\n    }\n  }, []);\n  //#endregion\n\n  const value = useMemo(\n    () => ({\n      mount,\n      update,\n      unmount,\n    }),\n    [mount, update, unmount]\n  );\n\n  return (\n    <PortalContext.Provider value={value}>\n      {children}\n      <PortalContainer ref={containerRef} />\n    </PortalContext.Provider>\n  );\n};\n\nconst PortalHost = memo(PortalHostComponent);\n\nexport default PortalHost;\n"]}